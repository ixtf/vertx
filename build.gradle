plugins {
    id 'io.spring.dependency-management' version '1.0.7.RELEASE'
    id 'io.franzbecker.gradle-lombok' version '3.0.0'
}
allprojects {
    group 'com.github.ixtf.vertx'
    version '1.0'

    apply plugin: 'idea'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'io.franzbecker.gradle-lombok'

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://plugins.gradle.org/m2' }
        maven { url 'https://jitpack.io' }
    }

    dependencyManagement {
        imports {
            mavenBom "com.github.ixtf:bom:${bomVersion}"
        }
    }
}
subprojects {
    apply plugin: 'java'
    sourceCompatibility = 11
    targetCompatibility = 11

    dependencies {
        compile "com.github.ixtf.japp:codec",
                "io.vertx:vertx-rx-java2",
                "io.vertx:vertx-hazelcast",
                "io.vertx:vertx-reactive-streams",
                "io.vertx:vertx-web",
                "io.vertx:vertx-config-yaml",
                "io.vertx:vertx-service-discovery",
                "io.vertx:vertx-circuit-breaker",
                "io.vertx:vertx-service-proxy",
                "io.vertx:vertx-health-check",
                "io.vertx:vertx-dropwizard-metrics",
                'io.projectreactor:reactor-core',
                'io.jaegertracing:jaeger-client:1.0.0',

                "javax:javaee-api",
                "org.hibernate.validator:hibernate-validator",
                "org.glassfish:javax.el"

        compileOnly "io.vertx:vertx-codegen"

        testCompile "org.junit.jupiter:junit-jupiter-engine:5.4.2",
                "io.vertx:vertx-unit",
                "io.vertx:vertx-web-client"
    }

    jar.manifest {
        attributes(
                'Implementation-Title': name,
                'Implementation-Version': version,
                'Built-By': System.getProperty('user.name'),
                'Built-JDK': System.getProperty('java.version'),
                'Source-Compatibility': sourceCompatibility,
                'Target-Compatibility': targetCompatibility
        )
    }
    [compileJava, compileTestJava].each() {
//        it.options.compilerArgs += ["-Xlint:all", "-Xlint:-options", "-Xlint:-path"]
        it.options.encoding = "UTF-8"
        if (rootProject.hasProperty('failOnWarnings') && rootProject.failOnWarnings.toBoolean()) {
            it.options.compilerArgs += ["-Werror"]
        }
    }
    compileTestJava {
        // serialVersionUID is basically guaranteed to be useless in our tests
        options.compilerArgs += ["-Xlint:-serial"]
    }
    javadoc.options {
        encoding = 'UTF-8'
        use = true
//        links 'https://docs.oracle.com/javase/8/docs/api/'
    }
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    artifacts {
        archives javadocJar, sourcesJar
    }

}
